package entities;

import common.MessageProcessor;
import common.SocketClient;
import common.SocketServer;
import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 * Entity containing the logic and GUI of the CLient entity. The GUI was created to facilitate the user's interaction with the entity and for a better understanding of what is happening inside.
 * This entity is the one responsible for making the requests to the server.
 * @author Filipe Pires (85122) and Jo√£o Alegria (85048)
 */
public class Client extends javax.swing.JFrame implements MessageProcessor{
    
    private int id=-1;
    
    private int reqID;
    private SocketServer socket;
    private Thread socketThread;
    private int socketStatus;
    
    private List<String> sentRequests;
    private List<String> pendingRequests;
    private List<String> executedRequests;

    /**
     * Creates new form Client.
     * @param args main server host IP address and port.
     */
    public Client(String args[]) {
        this.reqID = 0;
        this.sentRequests = new ArrayList();
        this.pendingRequests = new ArrayList();
        this.executedRequests = new ArrayList();
        
        initComponents();
        this.setTitle("Client");
        this.warning.setVisible(false);
        this.warning.setForeground(Color.red);
        this.host.setText("localhost");
        this.port.setText(args[0]);
        this.mainServerHost.setText(args[1]);
        this.mainServerPort.setText(args[2]);
    }
    
    /**
     * Register client in Load Balancer, that consequently will register in the Tactic Manager.
     * @return boolean signaling if the process was successful or not.
     */
    public boolean registerClient(){
        try {
            SocketClient socketManager = new SocketClient(this.mainServerHost.getText(), Integer.valueOf(this.mainServerPort.getText()));
            socketManager.send("newClient-" + this.host.getText() + "-" + this.port.getText());
            socketManager.close();
            status.setBackground(Color.green);
            return true;
        } catch (IOException ex) {
//            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            status.setBackground(Color.red);
            return false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pending = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        sent = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        executed = new javax.swing.JList<>();
        send = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        nIter = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        host = new javax.swing.JTextField();
        port = new javax.swing.JTextField();
        confirm = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        mainServerHost = new javax.swing.JTextField();
        mainServerPort = new javax.swing.JTextField();
        status = new javax.swing.JTextField();
        warning = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setMinimumSize(new java.awt.Dimension(663, 296));

        jScrollPane1.setViewportView(pending);

        jScrollPane2.setViewportView(sent);

        jScrollPane3.setViewportView(executed);

        send.setText("Send");
        send.setEnabled(false);
        send.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendMouseClicked(evt);
            }
        });

        stop.setText("Stop");
        stop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopMouseClicked(evt);
            }
        });

        nIter.setModel(new javax.swing.SpinnerNumberModel(1, 0, 10, 1));

        jLabel1.setText("# of Iter:");

        jLabel2.setText("Client:");

        confirm.setText("Confirm");
        confirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                confirmMouseClicked(evt);
            }
        });

        jLabel5.setText("Main Server:");

        status.setEditable(false);
        status.setBackground(java.awt.Color.red);
        status.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        status.setText("Status");
        status.setFocusable(false);

        warning.setText("Warning: invalid input.");

        jLabel3.setText("Requests Sent:");

        jLabel4.setText("Pending:");

        jLabel6.setText("Executed:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(status)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(send)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nIter, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(warning)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(host, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainServerHost, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(confirm))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                .addGap(105, 105, 105)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                                .addGap(151, 151, 151)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                .addGap(139, 139, 139))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirm)
                    .addComponent(jLabel5)
                    .addComponent(mainServerHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(send)
                    .addComponent(stop)
                    .addComponent(nIter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(warning))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendMouseClicked
        reqID++;
        String message = "| " + this.id + " | " + ((100*this.id)+reqID) + " | 01 | " + this.nIter.getValue() + " |";
        sentRequests.add(message);
        updateSent();
        try {
            SocketClient socketManager = new SocketClient(this.mainServerHost.getText(), Integer.valueOf(this.mainServerPort.getText()));
            socketManager.send(message);
            socketManager.close();
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        pendingRequests.add(message);
        updatePending();
    }//GEN-LAST:event_sendMouseClicked

    private void stopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopMouseClicked
        if(this.id>=0){
            try {
                SocketClient socketManager = new SocketClient(this.mainServerHost.getText(), Integer.valueOf(this.mainServerPort.getText()));
                socketManager.send("clientDown-" + this.id);
                socketManager.close();
            } catch (IOException ex) {
//                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_stopMouseClicked

    private void confirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmMouseClicked
        if(this.socket==null){
            this.socket = new SocketServer(Integer.valueOf(this.port.getText()), this);
            this.socketStatus = 0;
            this.socketThread = new Thread(socket);
            this.socketThread.start();
            
            while(this.socketStatus == 0) {}
            
            if(this.socketStatus<0) {
                this.warning.setVisible(true);
                this.socket = null;
                return;
            }
        }
        if(this.registerClient()){
            this.warning.setVisible(false);
            this.send.setEnabled(true);
            this.confirm.setEnabled(false);
            this.host.setEnabled(false);
            this.port.setEnabled(false);
            this.mainServerHost.setEnabled(false);
            this.mainServerPort.setEnabled(false);
        }
        
    }//GEN-LAST:event_confirmMouseClicked

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client(args).setVisible(true);
            }
        });
    }

    /**
     * Establishes the logic to use when processing incoming messages.
     * @param message String containing the incoming message
     * @return String containing the acknowledge message intended to be returned to the message sender 
     */
    @Override
    public String processMessage(String message) {
        String[] processedMessage;
        if(message.contains("-")) {
            processedMessage = message.split("-");
            this.id=Integer.valueOf(processedMessage[1]);
            this.setTitle("Client #" + this.id);
        } else {
            String pending = "";
            String[] tmp = message.replaceAll("\\s+","").split("\\|");
            processedMessage = Arrays.copyOfRange(tmp, 1, tmp.length);
            for(String p: pendingRequests) {
                String[] tmp2 = message.replaceAll("\\s+","").split("\\|");
                String[] processedP = Arrays.copyOfRange(tmp, 1, tmp.length);
                if(Integer.valueOf(processedMessage[2]) == Integer.valueOf(processedP[2])) {
                    pending = p; 
                }
            }
            pendingRequests.remove(pending);
            executedRequests.add(message);
            updatePending();
            updateExecuted();
        }
        return "Message processed with success.";
    }
    
    /**
     * Updates the current server socket status.
     * @param socketStatus int representing the status of the socket.
     */
    @Override
    public void setSocketStatus(int socketStatus) {
        this.socketStatus = socketStatus;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirm;
    private javax.swing.JList<String> executed;
    private javax.swing.JTextField host;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField mainServerHost;
    private javax.swing.JTextField mainServerPort;
    private javax.swing.JSpinner nIter;
    private javax.swing.JList<String> pending;
    private javax.swing.JTextField port;
    private javax.swing.JButton send;
    private javax.swing.JList<String> sent;
    private javax.swing.JTextField status;
    private javax.swing.JButton stop;
    private javax.swing.JLabel warning;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the GUI sent requests list.
     */
    private void updateSent(){
        String[] tmp = new String[sentRequests.size()];
        sentRequests.toArray(tmp);
        sent.setListData(tmp);
    }

    /**
     * Updates the GUI pending requests list.
     */
    private void updatePending(){
        String[] tmp = new String[pendingRequests.size()];
        pendingRequests.toArray(tmp);
        pending.setListData(tmp);
    }
    
    /**
     * Updates the GUI executed requests list.
     */
    private void updateExecuted(){
        String[] tmp = new String[executedRequests.size()];
        executedRequests.toArray(tmp);
        executed.setListData(tmp);
    }

}
